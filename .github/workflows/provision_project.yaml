name: Provision Project

on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      name:
        description: 'Name of the Project to create.'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: read

jobs:
  build:
    name: Provision Project
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TFC_API_TOKEN: ${{ secrets.TFE_TOKEN }}
      TFC_ORGANIZATION: "benoitblais-hashicorp"
      TFC_PROJECT: "Terraform Projects Factory"
      TFC_Project_NAME: "Projectsfactory"
      TFC_Project_PROVIDER: "tfe"
    steps:

      - name: Retreive no-code Project ID
        id: get_no_code_Project_id
        run: |
          echo "INFO     | Build required variables."
          tfc_api_url="https://app.terraform.io/api/v2"
          auth_header="Authorization: Bearer ${TFC_API_TOKEN}"
          content_header="Content-Type: application/vnd.api+json"
          echo "INFO     | Get Project information."
          {
            run=$(curl -sS --request GET --url "${tfc_api_url}/organizations/${TFC_ORGANIZATION}/registry-Projects/private/${TFC_ORGANIZATION}/${TFC_Project_NAME}/${TFC_Project_PROVIDER}" \
            --header "${auth_header}" --header "${content_header}")
            if ! [[ "${run}" =~ "{\"data\":" ]]; then
              echo "ERROR    | Unable to to get Project information."
              echo "${run}"
              exit 1
            fi
          } ||
          {
            echo "ERROR    | An error occurred during the API call to get Project information."
            exit 1
          }
          no_code_id=$(echo "${run}" | jq -r '.data.relationships."no-code-Projects".data[].id')
          if [ -z "${no_code_id}" ] || [ "${no_code_id}" == "null" ]; then
            echo "ERROR    | Unable to find no-code Project ID."
            exit 1
          else
            echo "INFO     | No-code Project ID is ${no_code_id}."
            echo "NO_CODE_ID=${no_code_id}" >> "$GITHUB_OUTPUT"
          fi

      - name: Retreive HCP Terraform Project ID
        id: project
        run: |
          echo "INFO     | Build required variables."
          tfc_api_url="https://app.terraform.io/api/v2"
          auth_header="Authorization: Bearer ${TFC_API_TOKEN}"
          content_header="Content-Type: application/vnd.api+json"
          echo "INFO     | Run API call to get project list."
          {
            run=$(curl -sS --request GET --url "${tfc_api_url}/organizations/${TFC_ORGANIZATION}/projects" \
            --header "${auth_header}" --header "${content_header}")
            if ! [[ "${run}" =~ "{\"data\":" ]]; then
              echo "ERROR    | Unable to get project list."
              echo "${run}"
              exit 1
            fi
          } ||
          {
            echo "ERROR    | An error occurred during the API call to get project list."
            exit 1
          }
          project_id=$(echo "${run}" | jq -r '.data[] | select(.attributes.name=="'"${TFC_PROJECT}"'") | .id')
          if [ -z "${project_id}" ] || [ "${project_id}" == "null" ]; then
            echo "ERROR    | Unable to find project ID."
            exit 1
          else
            echo "INFO     | Project ID is ${project_id}."
            echo "id=${project_id}" >> "$GITHUB_OUTPUT"
          fi

      - name: Provision Project
        id: provision
        env:
          PROVIDER: ${{ github.event.inputs.provider }}
          NAME: ${{ github.event.inputs.name }}
          NO_CODE_ID: ${{ steps.get_no_code_Project_id.outputs.NO_CODE_ID }}
          PROJECT_ID: ${{ steps.project.outputs.id }}
          NO_CODE: ${{ github.event.inputs.no-code }}
        run: |
          echo "INFO     | Build required variables."
          tfc_api_url="https://app.terraform.io/api/v2"
          auth_header="Authorization: Bearer ${TFC_API_TOKEN}"
          content_header="Content-Type: application/vnd.api+json"
          workspace_name="terraform-${PROVIDER}-${NAME}"
          echo "INFO     | Create workspace ${workspace_name} in project ${TFC_PROJECT}."
          if [ "${NO_CODE}" = true ] ; then
            no_code='{"type":"vars","attributes":{"key":"no_code_Project","value":"true","category":"terraform"}}'
          else
            no_code='{"type":"vars","attributes":{"key":"no_code_Project","value":"false","category":"terraform"}}'
          fi
          json_string='{"data":{"type":"workspaces","attributes":{"name":"'"${workspace_name}"'","auto_apply":true},"relationships":{"project":{"data":{"id":"'"${PROJECT_ID}"'","type":"project"}},"vars":{"data":[{"type":"vars","attributes":{"key":"Project_name","value":"'"${NAME}"'","category":"terraform"}},{"type":"vars","attributes":{"key":"Project_provider","value":"'"${PROVIDER}"'","category":"terraform"}},'"${no_code}"']}}}}'
          json_payload=$(echo "${json_string}" | jq)
          run=$(curl -sS --request POST --url "${tfc_api_url}/no-code-Projects/${NO_CODE_ID}/workspaces" \
          --header "${auth_header}" --header "${content_header}" --data "${json_payload}")
          if ! [[ "${run}" =~ "{\"data\":" ]]; then
            echo "ERROR    | Unable to create workspace."
            echo "${run}"
            exit 1
          else
            echo "INFO     | Workspace created successfully."
            workspace_id=$(echo "${run}" | jq -r '.data.id')
            echo "INFO     | Workspace ID is ${workspace_id}."
            workspace_name=$(echo "${run}" | jq -r '.data.attributes.name')
            echo "INFO     | Workspace name is ${workspace_name}."
            echo "workspace_id=${workspace_id}" >> "$GITHUB_OUTPUT"
            echo "workspace_name=${workspace_name}" >> "$GITHUB_OUTPUT"
          fi

      - name: Provision Project
        env:
          PROVIDER: ${{ github.event.inputs.provider }}
          NAME: ${{ github.event.inputs.name }}
          WORKSPACE_ID: ${{ steps.provision.outputs.workspace_id }}
          WORKSPACE_NAME: ${{ steps.provision.outputs.workspace_name }}
        run: |
          echo "INFO     | Build required variables."
          tfc_api_url="https://app.terraform.io/api/v2"
          auth_header="Authorization: Bearer ${TFC_API_TOKEN}"
          content_header="Content-Type: application/vnd.api+json" 
          json_string='{"data":{"id":"'"WORKSPACE_ID"'","type":"workspaces","attributes":{"structured-run-output-enabled":false,"terraform-version": "latest"}}}'
          json_payload=$(echo "${json_string}" | jq)
          run=$(curl -sS --request PATCH --url "${tfc_api_url}/organizations/${TFC_ORGANIZATION}/workspaces/${WORKSPACE_NAME}" \
          --header "${auth_header}" --header "${content_header}" --data "${json_payload}")
          if ! [[ "${run}" =~ "{\"data\":" ]]; then
            echo "ERROR    | Unable to update workspace."
            echo "${run}"
            exit 1
          else
            echo "INFO     | Workspace updated successfully."
          fi
